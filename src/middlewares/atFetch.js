const URL = require('url')
const { fromEntries } = require('../util')
const isPlainObject = require('is-plain-object')

module.exports = (ctx, next) => {
	if (typeof ctx.fetch !== 'function') {
		throw new Error(`ctx.fetch is not a function`)
	}

	ctx.originalFetch = ctx.fetch
	ctx.fetch = async params => {
		// handle url
		let url = params.url
	
		if (isPlainObject(url)) {
			url = URL.format(url)
		}
	
		if (typeof url !== 'string' || !url) {
			throw new Error(`url is not valid: ${url}`)
		}
	
		// handle headers
		let options = { ...params.options }
		let headers = (options.headers = {
			...ctx.headers,
			...fromEntries(options.headers)
		})
	
		// drop content-length which may not be correct
		// content-length will be generated by fetch later
		if (headers['content-length']) {
			delete headers['content-length']
		} else if (headers['Content-Length']) {
			delete headers['Content-Length']
		}
	
		// handle body type
		let bodyType = params.bodyType || 'json'
	
		if (bodyType === 'json') {
			options.body = JSON.stringify(options.body)
		} else if (bodyType === 'text') {
			options.body = options.body + ''
		}
	
		// handle response type
		let response = await ctx.originalFetch(url, options)
		let type = params.responseType || 'json'
	
		if (typeof response[type] !== 'function') {
			throw new Error(`Unsupported responseType: ${type}`)
		}
	
		// handle result
		return response[type]()
	}

	ctx.directive('fetch', async params => {
		ctx.result = await ctx.fetch(params)
	})

	return next()
}
